----------------------------------------------ASSIGNMENT 1--------------------------------------------
CREATE TABLE BOOKS(BOOK_NO NUMBER(6) PRIMARY KEY,BOOK_NAME VARCHAR2(30) NOT NULL,AUTHOR_NAME VARCHAR2(30),COST NUMBER(7,2),CATEGORY CHAR(10));

ALTER TABLE BOOKS ADD CONSTRAINT  CATEGORY CHECK (CATEGORY IN ('SCIENCE','DATABASE','SYSTEM','OTHERS'));

CREATE TABLE ISSUE (LIB_ISSUE_ID NUMBER(4),BOOK_NO NUMBER(3), MEMBER_ID NUMBER(5) ,ISSUE_DATE DATE,RETURN_DATE DATE);
desc issue
CREATE TABLE member (
  member_id NUMBER(10) PRIMARY KEY,
  member_name VARCHAR2(50) NOT NULL,
  member_address VARCHAR2(50),
  acc_open_date DATE,
  membership_type VARCHAR2(20) CHECK (membership_type IN ('Lifetime', 'Annual', 'Half Yearly', 'Quarterly')),
  fees_paid NUMBER(4),
  max_books_allowed NUMBER(2) CHECK (max_books_allowed < 7),
  penalty_amount NUMBER(7,2) CHECK (penalty_amount <= 1000)
);

ALTER TABLE ISSUE
ADD CONSTRAINT FK_PersonOrde
FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID);

ALTER TABLE ISSUE
ADD CONSTRAINT FK_PersonOrder
FOREIGN KEY (BOOK_NO) REFERENCES BOOKS(BOOK_NO);

INSERT INTO MEMBER VALUES(1,'SAYANTAN SINHA','PUNE',DATE'2010-12-10','Lifetime',2000,6,50);
INSERT INTO MEMBER VALUES(2,'ABHIRUP SARKAR','KOLKATA',DATE'2011-1-19','Annual',1400,3,0);
INSERT INTO MEMBER VALUES(3,'RITESH BHUNIYA','GUJRAT',DATE'2020-2-11','Quarterly',350,2,100);
INSERT INTO MEMBER VALUES(4,'PARESH SEN','TRIPUTA',DATE'2011-3-21','Half Yearly',700,1,200);
INSERT INTO MEMBER VALUES(5,'SOHINI HALDAR','BIRBHUM',DATE'2011-04-11','Lifetime',2000,6,10);
INSERT INTO MEMBER VALUES(6,'SUPARNA BISWAS','KOLKATA',DATE'2011-04-12','Half Yearly',700,1,0);
INSERT INTO MEMBER VALUES(7,'SURANJANA BASU','PURULIA',DATE'2011-04-30','Annual',1400,3,50);
INSERT INTO MEMBER VALUES(9,'ARPITA ROY','KOLKATA',DATE'2011-7-31','Half Yearly',700,1,0);

SELECT * FROM MEMBER;


INSERT INTO books (BOOK_NO, BOOK_NAME, AUTHOR_NAME, COST, CATEGORY)
VALUES (101, 'LETS US C', 'DENIS RITCHIE', 450, 'OTHERS');
INSERT INTO books (BOOK_NO, BOOK_NAME, AUTHOR_NAME, COST, CATEGORY)
VALUES (102, 'ORACLE-COMPLETE REF', 'LONI', 550, 'DATABASE');
INSERT INTO books (BOOK_NO, BOOK_NAME, AUTHOR_NAME, COST, CATEGORY)
VALUES (103, 'VISUAL BASIC 10', 'BPB', 700, 'OTHERS');
INSERT INTO books (BOOK_NO, BOOK_NAME, AUTHOR_NAME, COST, CATEGORY)
VALUES (104, 'MASTERING SQL', 'LONI', 450, 'DATABASE');
INSERT INTO books (BOOK_NO, BOOK_NAME, AUTHOR_NAME, COST, CATEGORY)
VALUES (105, 'PL SQL-REF', 'SCOTT URMAN', 750, 'DATABASE');
INSERT INTO books (BOOK_NO, BOOK_NAME, AUTHOR_NAME, COST, CATEGORY)
VALUES (106, 'UNIX', 'SUMITAVA DAS', 300, 'SYSTEM');
INSERT INTO books (BOOK_NO, BOOK_NAME, AUTHOR_NAME, COST, CATEGORY)
VALUES (107, 'OPTICS', 'GHATAK', 600, 'SCIENCE');
INSERT INTO books (BOOK_NO, BOOK_NAME, AUTHOR_NAME, COST, CATEGORY)
VALUES (108, 'DATA STURCTURE', 'G.S. BALUJA', 450, 'OTHERS');

INSERT INTO issue (LIB_ISSUE_ID, BOOK_NO, MEMBER_ID, ISSUE_DATE, RETURN_DATE)
VALUES (7001, 101, 1, '10-JAN-11', NULL);
INSERT INTO issue (LIB_ISSUE_ID, BOOK_NO, MEMBER_ID, ISSUE_DATE, RETURN_DATE)
VALUES (7002, 102, 2, '25-JAN-11', NULL);
INSERT INTO issue (LIB_ISSUE_ID, BOOK_NO, MEMBER_ID, ISSUE_DATE, RETURN_DATE)
VALUES (7003, 104, 1, '01-FEB-11', NULL);
INSERT INTO issue (LIB_ISSUE_ID, BOOK_NO, MEMBER_ID, ISSUE_DATE, RETURN_DATE)
VALUES (7004, 104, 2, '15-MAR-11', NULL);
------------------------ASSIGNMENT 2-------------------------------------------------------------------
SELECT book_name, cost FROM books WHERE cost = (SELECT MAX(cost) FROM books)
select min(cost) as Min_cost,avg(cost) as AVG_cost, sum(cost) as TOTAL_COST from books
select MEMBER_NAME,MEMBER_ID from member where MEMBER_ID in(select MEMBER_ID from issue where ISSUE_DATE BETWEEN '26-JAN-11' AND '14-APRIL-11')
SELECT BOOK_NAME,AUTHOR_NAME FROM BOOKS WHERE CATEGORY NOT IN 'OTHERS'
SELECT BOOK_NAME,AUTHOR_NAME FROM BOOKS WHERE AUTHOR_NAME LIKE '____T%' 
SELECT COUNT(*) FROM BOOKS WHERE COST>350
SELECT COUNT(DISTINCT(AUTHOR_NAME)) FROM BOOKS
SELECT ABS(-167) FROM DUAL
SELECT POWER(8,6) FROM DUAL
SELECT ROUND(134.56789,2) FROM DUAL
SELECT SQRT(144) FROM DUAL
SELECT FLOOR(13.15) FROM DUAL
SELECT EXTRACT(YEAR FROM SYSDATE),EXTRACT(MONTH FROM SYSDATE),EXTRACT(DAY FROM SYSDATE) FROM DUAL
SELECT MAX(VALUE) FROM (SELECT 4 AS VALUE FROM DUAL UNION ALL SELECT 5 FROM DUAL UNION ALL SELECT 17 FROM DUAL);
SELECT MEMBER_NAME MEMBER_ADDRESS FROM MEMBER WHERE MEMBER_ADDRESS LIKE'KOLKATA'
SELECT BOOK_NAME FROM BOOKS WHERE COST BETWEEN 300 AND 500
SELECT MEMBER_NAME FROM MEMBER WHERE MEMBERSHIP_TYPE LIKE 'Half Yearly'
SELECT MEMBER_NAME FROM MEMBER WHERE ACC_OPEN_DATE LIKE '_______11'
SELECT PENALTY_AMOUNT FROM MEMBER WHERE MEMBER_ID IN (SELECT MEMBER_ID FROM ISSUE WHERE BOOK_NO =(SELECT BOOK_NO FROM BOOKS WHERE BOOK_NAME = 'LETS US C'))
SELECT MAX_BOOKS_ALLOWED FROM MEMBER WHERE MEMBER_ID IN (SELECT MEMBER_ID FROM ISSUE WHERE ISSUE_DATE LIKE '__JAN__')
SELECT MEMBER_NAME FROM MEMBER WHERE MEMBER_ID NOT IN (SELECT DISTINCT(MEMBER_ID) FROM ISSUE) 
SELECT BOOK_NAME,CATEGORY FROM BOOKS WHERE COST IS NULL
SELECT BOOK_NAME FROM BOOKS WHERE AUTHOR_NAME ='LONI' AND COST<600
SELECT * FROM ISSUE WHERE RETURN_DATE IS NULL
SELECT BOOK_NAME FROM BOOKS WHERE CATEGORY IN ('SCIENCE','DATABASE')
SELECT MEMBER_NAME FROM MEMBER ORDER BY PENALTY_AMOUNT DESC
select * from books order by CATEGORY ASC,cost desc
SELECT BOOK_NAME FROM BOOKS WHERE BOOK_NAME LIKE '%SQL%';
SELECT MEMBER_NAME FROM MEMBER  WHERE MEMBER_NAME LIKE 'S%'
select MEMBER_NAME from member where (MEMBER_NAME like 'S%T%') or (MEMBER_NAME like 'A%T%')
SELECT INITCAP(book_name) AS book_name, UPPER(author_name) FROM books
ORDER BY book_name DESC;
-----------------------------------------ASSIGNMENT 3-----------------------------------------------------------------

1. List the various categories and count of books in each category:
sql
SELECT CATEGORY, COUNT(*) AS BOOK_COUNT
FROM BOOKS
GROUP BY CATEGORY;


2. List the BOOK_NO and the NUMBER OF TIMES the Book is issued in descending order of count:
sql
SELECT BOOK_NO, COUNT(*) AS ISSUE_COUNT
FROM ISSUE
GROUP BY BOOK_NO
ORDER BY ISSUE_COUNT DESC;


3. Display the MEMBER ID and the NO OF BOOKS for each member that has issued more than 1 book:
sql
SELECT MEMBER_ID, COUNT(*) AS BOOK_COUNT
FROM ISSUE
GROUP BY MEMBER_ID
HAVING COUNT(*) > 1;


4. Display the MEMBER ID, BOOK NO, and NO OF TIMES the same book is issued by the MEMBER in descending order of count:
sql
SELECT MEMBER_ID, BOOK_NO, COUNT(*) AS ISSUE_COUNT
FROM ISSUE
GROUP BY MEMBER_ID, BOOK_NO
ORDER BY ISSUE_COUNT DESC;


5. Select all information of the book with the 2nd maximum cost:
sql
SELECT *
FROM BOOKS
WHERE COST = (
    SELECT MAX(COST)
    FROM BOOKS
    WHERE COST < (
        SELECT MAX(COST)
        FROM BOOKS
    )
);


6. Copy the MEMBER, BOOKS, and ISSUE tables to MEMBER_COPY, BOOKS_COPY, and ISSUE_COPY respectively:
sql
CREATE TABLE MEMBER_COPY AS SELECT * FROM MEMBER;
CREATE TABLE BOOKS_COPY AS SELECT * FROM BOOKS;
CREATE TABLE ISSUE_COPY AS SELECT * FROM ISSUE;


7. Create a table named QUERY1 with two attributes as BOOK_NO and ISSUE_DATE and copy all information about BOOK_NO and ISSUE_DATE from the ISSUE table to the QUERY1 table:
sql
CREATE TABLE QUERY1 AS SELECT BOOK_NO, ISSUE_DATE FROM ISSUE;


8. Create and store BOOK_NAME, AUTHOR_NAME, and COST to QUERY2 table where cost is greater than 300:
sql
CREATE TABLE QUERY2 AS SELECT BOOK_NAME, AUTHOR_NAME, COST FROM BOOKS WHERE COST > 300;


9. Insert BOOK_NAME, AUTHOR_NAME, and COST to QUERY2 table where cost is less than 300:
sql
INSERT INTO QUERY2 (BOOK_NAME, AUTHOR_NAME, COST)
SELECT BOOK_NAME, AUTHOR_NAME, COST
FROM BOOKS
WHERE COST < 300;


10. Add an attribute named AVAILABLE with data type NUMBER (5) in the BOOKS_COPY table and fill up the new attribute with data:
sql
ALTER TABLE BOOKS_COPY ADD AVAILABLE NUMBER(5);
-- Update the AVAILABLE attribute with appropriate values
UPDATE BOOKS_COPY
SET AVAILABLE = 10;


11. Change the data type of the CATEGORY attribute to VARCHAR2 (15) in the BOOKS_COPY table:
sql
ALTER TABLE BOOKS_COPY MODIFY CATEGORY VARCHAR2(15);
